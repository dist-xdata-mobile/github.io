(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{460:function(e,t,o){"use strict";o.r(t);var n=o(6),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"postgis-常用函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#postgis-常用函数"}},[e._v("#")]),e._v(" PostGIS 常用函数")]),e._v(" "),o("blockquote",[o("p",[e._v("作者:网络 时间： 2020-10-16")])]),e._v(" "),o("h2",{attrs:{id:"_1-ogc-标准函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-ogc-标准函数"}},[e._v("#")]),e._v(" "),o("strong",[e._v("1.OGC 标准函数")])]),e._v(" "),o("p",[o("strong",[e._v("管理函数：")]),e._v("\n添加几何字段 AddGeometryColumn(, , , , , )\n删除几何字段 DropGeometryColumn(, , )\n检查数据库几何字段并在 geometry_columns 中归档 Probe_Geometry_Columns()\n给几何对象设置空间参考（在通过一个范围做空间查询时常用） ST_SetSRID(geometry, integer)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象关系函数 ：")]),e._v("\n获取两个几何对象间的距离 ST_Distance(geometry, geometry)\n如果两个几何对象间距离在给定值范围内，则返回 TRUE ST_DWithin(geometry, geometry, float)\n判断两个几何对象是否相等\n（比如 LINESTRING(0 0, 2 2)和 LINESTRING(0 0, 1 1, 2 2)是相同的几何对象） ST_Equals(geometry, geometry)\n判断两个几何对象是否分离 ST_Disjoint(geometry, geometry)\n判断两个几何对象是否相交 ST_Intersects(geometry, geometry)\n判断两个几何对象的边缘是否接触 ST_Touches(geometry, geometry)\n判断两个几何对象是否互相穿过 ST_Crosses(geometry, geometry)\n判断 A 是否被 B 包含 ST_Within(geometry A, geometry B)\n判断两个几何对象是否是重叠 ST_Overlaps(geometry, geometry)\n判断 A 是否包含 B ST_Contains(geometry A, geometry B)\n判断 A 是否覆盖 B ST_Covers(geometry A, geometry B)\n判断 A 是否被 B 所覆盖 ST_CoveredBy(geometry A, geometry B)\n通过 DE-9IM 矩阵判断两个几何对象的关系是否成立 ST_Relate(geometry, geometry, intersectionPatternMatrix)\n获得两个几何对象的关系（DE-9IM 矩阵） ST_Relate(geometry, geometry)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象处理函数：")]),e._v("\n获取几何对象的中心 ST_Centroid(geometry)\n面积量测 ST_Area(geometry)\n长度量测 ST_Length(geometry)\n返回曲面上的一个点 ST_PointOnSurface(geometry)\n获取边界 ST_Boundary(geometry)\n获取缓冲后的几何对象 ST_Buffer(geometry, double, [integer])\n获取多几何对象的外接对象 ST_ConvexHull(geometry)\n获取两个几何对象相交的部分 ST_Intersection(geometry, geometry)\n将经度小于 0 的值加 360 使所有经度值在 0-360 间 ST_Shift_Longitude(geometry)\n获取两个几何对象不相交的部分（A、B 可互换） ST_SymDifference(geometry A, geometry B)\n从 A 去除和 B 相交的部分后返回 ST_Difference(geometry A, geometry B)\n返回两个几何对象的合并结果 ST_Union(geometry, geometry)\n返回一系列几何对象的合并结果 ST_Union(geometry set)\n用较少的内存和较长的时间完成合并操作，结果和 ST_Union 相同 ST_MemUnion(geometry set)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象存取函数：")]),e._v("\n获取几何对象的 WKT 描述 ST_AsText(geometry)\n获取几何对象的 WKB 描述 ST_AsBinary(geometry)\n获取几何对象的空间参考 ID ST_SRID(geometry)\n获取几何对象的维数 ST_Dimension(geometry)\n获取几何对象的边界范围 ST_Envelope(geometry)\n判断几何对象是否为空 ST_IsEmpty(geometry)\n判断几何对象是否不包含特殊点（比如自相交） ST_IsSimple(geometry)\n判断几何对象是否闭合 ST_IsClosed(geometry)\n判断曲线是否闭合并且不包含特殊点 ST_IsRing(geometry)\n获取多几何对象中的对象个数 ST_NumGeometries(geometry)\n获取多几何对象中第 N 个对象 ST_GeometryN(geometry,int)\n获取几何对象中的点个数 ST_NumPoints(geometry)\n获取几何对象的第 N 个点 ST_PointN(geometry,integer)\n获取多边形的外边缘 ST_ExteriorRing(geometry)\n获取多边形内边界个数 ST_NumInteriorRings(geometry)\n同上 ST_NumInteriorRing(geometry)\n获取多边形的第 N 个内边界 ST_InteriorRingN(geometry,integer)\n获取线的终点 ST_EndPoint(geometry)\n获取线的起始点 ST_StartPoint(geometry)\n获取几何对象的类型 GeometryType(geometry)\n类似上，但是不检查 M 值，即 POINTM 对象会被判断为 point ST_GeometryType(geometry)\n获取点的 X 坐标 ST_X(geometry)\n获取点的 Y 坐标 ST_Y(geometry)\n获取点的 Z 坐标 ST_Z(geometry)\n获取点的 M 值 ST_M(geometry)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象构造函数 ：")]),e._v("\n参考语义：\nText：WKT\nWKB：WKB\nGeom:Geometry\nM:Multi\nBd:BuildArea\nColl:Collection ST_GeomFromText(text,[])")]),e._v(" "),o("p",[e._v("ST_PointFromText(text,[])\nST_LineFromText(text,[])\nST_LinestringFromText(text,[])\nST_PolyFromText(text,[])\nST_PolygonFromText(text,[])\nST_MPointFromText(text,[])\nST_MLineFromText(text,[])\nST_MPolyFromText(text,[])\nST_GeomCollFromText(text,[])\nST_GeomFromWKB(bytea,[])\nST_GeometryFromWKB(bytea,[])\nST_PointFromWKB(bytea,[])\nST_LineFromWKB(bytea,[])\nST_LinestringFromWKB(bytea,[])\nST_PolyFromWKB(bytea,[])\nST_PolygonFromWKB(bytea,[])\nST_MPointFromWKB(bytea,[])\nST_MLineFromWKB(bytea,[])\nST_MPolyFromWKB(bytea,[])\nST_GeomCollFromWKB(bytea,[])\nST_BdPolyFromText(text WKT, integer SRID)")]),e._v(" "),o("p",[e._v("ST_BdMPolyFromText(text WKT, integer SRID)")]),e._v(" "),o("h2",{attrs:{id:"_2-postgis-扩展函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-postgis-扩展函数"}},[e._v("#")]),e._v(" "),o("strong",[e._v("2. PostGIS 扩展函数")])]),e._v(" "),o("p",[o("strong",[e._v("管理函数：")])]),e._v(" "),o("p",[e._v("删除一个空间表（包括 geometry_columns 中的记录） DropGeometryTable([], )\n更新空间表的空间参考 UpdateGeometrySRID([], , , )\n更新空间表的统计信息 update_geometry_stats([, ])")]),e._v(" "),o("p",[o("strong",[e._v("参考语义：")]),e._v("\nGeos：GEOS 库\nJts：JTS 库\nProj：PROJ4 库 postgis_version()")]),e._v(" "),o("p",[e._v("postgis_lib_version()\npostgis_lib_build_date()\npostgis_script_build_date()\npostgis_scripts_installed()\npostgis_scripts_released()\npostgis_geos_version()\npostgis_jts_version()\npostgis_proj_version()\npostgis_uses_stats()\npostgis_full_version()")]),e._v(" "),o("p",[o("strong",[e._v("几何操作符：")])]),e._v(" "),o("p",[e._v("A 范围=B 范围 A = B\nA 范围覆盖 B 范围或 A 范围在 B 范围左侧 A &<> B\nA 范围在 B 范围左侧 A <<>> B\nA 范围覆盖 B 范围或 A 范围在 B 范围下方 A &<| B A 范围覆盖 B 范围或 A 范围在 B 范围上方 A |&> B\nA 范围在 B 范围下方 A <<| B A 范围在 B 范围上方 A |>> B\nA=B A ~= B\nA 范围被 B 范围包含 A @ B\nA 范围包含 B 范围 A ~ B\nA 范围覆盖 B 范围 A && B")]),e._v(" "),o("p",[o("strong",[e._v("几何量测函数：")])]),e._v(" "),o("p",[e._v("量测面积 ST_Area(geometry)\n根据经纬度点计算在地球曲面上的距离，单位米，地球半径取值 6370986 米 ST_distance_sphere(point, point)\n类似上，使用指定的地球椭球参数 ST_distance_spheroid(point, point, spheroid)\n量测 2D 对象长度 ST_length2d(geometry)\n量测 3D 对象长度 ST_length3d(geometry)\n根据经纬度对象计算在地球曲面上的长度 ST_length_spheroid(geometry,spheroid)\nST_length3d_spheroid(geometry,spheroid)\n量测两个对象间距离 ST_distance(geometry, geometry)\n量测两条线之间的最大距离 ST_max_distance(linestring,linestring)\n量测 2D 对象的周长 ST_perimeter(geometry)\nST_perimeter2d(geometry)\n量测 3D 对象的周长 ST_perimeter3d(geometry)\n量测两点构成的方位角，单位弧度 ST_azimuth(geometry, geometry)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象输出：")]),e._v("\n参考语义：\nNDR：Little Endian\nXDR：big-endian\nHEXEWKB：Canonical\nSVG：SVG 格式\nGML：GML 格式\nKML：KML 格式\nGeoJson：GeoJson 格式")]),e._v(" "),o("p",[e._v("ST_AsBinary(geometry,{‘NDR’|’XDR’})\nST_AsEWKT(geometry)\nST_AsEWKB(geometry, {‘NDR’|’XDR’})\nST_AsHEXEWKB(geometry, {‘NDR’|’XDR’})\nST_AsSVG(geometry, [rel], [precision])\nST_AsGML([version], geometry, [precision])\nST_AsKML([version], geometry, [precision])\nST_AsGeoJson([version], geometry, [precision], [options])")]),e._v(" "),o("p",[o("strong",[e._v("几何对象创建：")])]),e._v(" "),o("p",[e._v("参考语义：\nDump：转储 ST_GeomFromEWKT(text)")]),e._v(" "),o("p",[e._v("ST_GeomFromEWKB(bytea)\nST_MakePoint(, , [], [])\nST_MakePointM(, , )\nST_MakeBox2D(, )\nST_MakeBox3D(, )\nST_MakeLine(geometry set)\nST_MakeLine(geometry, geometry)\nST_LineFromMultiPoint(multipoint)\nST_MakePolygon(linestring, [linestring[]])\nST_BuildArea(geometry)\nST_Polygonize(geometry set)\nST_Collect(geometry set)\nST_Collect(geometry, geometry)\nST_Dump(geometry)\nST_DumpRings(geometry)")]),e._v(" "),o("p",[o("strong",[e._v("几何对象编辑：")])]),e._v(" "),o("p",[e._v("给几何对象添加一个边界，会使查询速度加快 ST_AddBBOX(geometry)\n删除几何对象的边界 ST_DropBBOX(geometry)\n添加、删除、设置点 ST_AddPoint(linestring, point, [])\nST_RemovePoint(linestring, offset)\nST_SetPoint(linestring, N, point)\n几何对象类型转换 ST_Force_collection(geometry)\nST_Force_2d(geometry)\nST_Force_3dz(geometry), ST_Force_3d(geometry),\nST_Force_3dm(geometry)\nST_Force_4d(geometry)\nST_Multi(geometry)\n将几何对象转化到指定空间参考 ST_Transform(geometry,integer)\n对 3D 几何对象作仿射变化 ST_Affine(geometry, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8, float8)\n对 2D 几何对象作仿射变化 ST_Affine(geometry, float8, float8, float8, float8, float8, float8)\n对几何对象作偏移 ST_Translate(geometry, float8, float8, float8)\n对几何对象作缩放 ST_Scale(geometry, float8, float8, float8)\n对 3D 几何对象作旋转 ST_RotateZ(geometry, float8)\nST_RotateX(geometry, float8)\nST_RotateY(geometry, float8)\n对 2D 对象作偏移和缩放 ST_TransScale(geometry, float8, float8, float8, float8)\n反转 ST_Reverse(geometry)\n转化到右手定则 ST_ForceRHR(geometry)\n参考 IsSimple 函数\n使用 Douglas-Peuker 算法 ST_Simplify(geometry, tolerance)\nST_SimplifyPreserveTopology(geometry, tolerance)\n讲几何对象顶点捕捉到网格 ST_SnapToGrid(geometry, originX, originY, sizeX, sizeY)\nST_SnapToGrid(geometry, sizeX, sizeY), ST_SnapToGrid(geometry, size)\n第二个参数为点，指定原点坐标 ST_SnapToGrid(geometry, geometry, sizeX, sizeY, sizeZ, sizeM)\n分段 ST_Segmentize(geometry, maxlength)\n合并为线 ST_LineMerge(geometry)")]),e._v(" "),o("p",[o("strong",[e._v("线性参考：")])]),e._v(" "),o("p",[e._v("根据 location（0-1）获得该位置的点 ST_line_interpolate_point(linestring, location)\n获取一段线 ST_line_substring(linestring, start, end)\n根据点获取 location（0-1） ST_line_locate_point(LineString, Point)\n根据量测值获得几何对象 ST_locate_along_measure(geometry, float8)\n根据量测值区间获得几何对象集合 ST_locate_between_measures(geometry, float8, float8)")]),e._v(" "),o("p",[o("strong",[e._v("杂项功能函数：")]),e._v("\n几何对象的摘要 ST_Summary(geometry)\n几何对象的边界 ST_box2d(geometry)\nST_box3d(geometry)\n多个几何对象的边界 ST_extent(geometry set)\n0=2d, 1=3dm, 2=3dz, 3=4d ST_zmflag(geometry)\n是否包含 Bounding Box ST_HasBBOX(geometry)\n几何对象的维数：2、3、4 ST_ndims(geometry)\n子对象的个数 ST_nrings(geometry)\nST_npoints(geometry)\n对象是否验证成功 ST_isvalid(geometry)\n扩大几何对象 ST_expand(geometry, float)\n计算一个空间表的边界范围 ST_estimated_extent([schema], table, geocolumn)\n获得空间参考 ST_find_srid(, , )\n几何对象使用的内存大小，单位 byte ST_mem_size(geometry)\n点是否在圆上 ST_point_inside_circle(,,,)\n获取边界的 X、Y、Z ST_XMin(box3d)\nST_YMin(box3d)\nST_ZMin(box3d)\nST_XMax(box3d)\nST_YMax(box3d)\nST_ZMax(box3d)\n构造一个几何对象的数组 ST_Accum(geometry set)")]),e._v(" "),o("p",[o("strong",[e._v("长事务支持：")]),e._v("\n启用/关闭长事务支持，重复调用无副作用 EnableLongTransactions()\nDisableLongTransactions()\n检查对行的 update 和 delete 操作是否已授权 CheckAuth([],\n, )\n锁定行 LockRow([], , , , [])\n解锁行 UnlockRows()\n在当前事务中添加授权 ID AddAuth()")]),e._v(" "),o("p",[e._v("其他的函数可到官网进行查看: http://postgis.net/docs/reference.html")])])}),[],!1,null,null,null);t.default=r.exports}}]);